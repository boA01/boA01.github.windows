垃圾回收算法：
    引用计数：引用+1，销毁-1，0回收
        优点：回收快
        缺点：不好处理循环引用
    标记清除：遍历所有引用对象并标记，未标记的则清除
        优点：解决引用计数的缺点
        缺点：需要STW，暂停程序
        优化：三色并发标记法：不用一次性完成
                三种状态，由 白->灰->黑，回收白色
                写屏障，本轮中指针传递时直接标记指针
        注意：GC过程中，新分配的内存立即标记，不属于写屏障技术
    分代回收：按生命周期划分不同代空间，不同代的回收算法和频率不同
        优点：回收性能好
        缺点：算法复杂

辅助GC：防止内存分配过快，GC过程中，需要分配内存的goroutine分担GC部分工作
触发时机：内存分配时都检测只用量是否达到阈值，达到就立即启动。
         增长率大于1时启动GC；GOGC监控增长率，默认100
         2min必触发GC
         runtime.GC() 手动触发

// 分治(nlog2 n; n^2; nlog2 n; log2 n)
func fastSort(s []int) []int{
    if len(s) > 1{
        mid := s[0]
        var larr,rarr []int

        for _, v := range(s[1:]) {
            if v > mid {
                rarr = append(rarr, v)
            } else {
                larr = append(larr, v)
            }
        }
        res := append(fastSort(larr), mid)
        res = append(res, fastSort(rarr)...)
        return res
    } else {
        return s
    }
}

// 当前项向前找到合适位置（n; n^2; n^2; 1）
func insertSort(s []int) {
    l := len(s)
    var temp int
    var j int

    for i:=1; i<l; i++ { // 第二项开始
        temp = s[i]
        for j = i-1; j >= 0 && temp < s[j]; j-- {
            s[j+1] = s[j]
        }
        s[j+1] = temp
    }
    fmt.Println(s)
}

// 前一项与后一项比较，确定末尾（n; n^2; n^2; 1）
func bubbleSort(s []int) {
    for i := len(s)-1; i > 0; i-- {
        flag := true
        for j := 0; j < i; j++ {
            if s[j] > s[j+1] {
                s[j], s[j+1] = s[j+1], s[j]
                flag = false
            }
        }
        if flag {
            break
        }
    }
    fmt.Println(s)
}

// 当前项与其余项比较，确定当前位（n^2; n^2; n^2; 1）
func selectSort(s []int) {
    for i := len(s)-1; i > 0; i-- {
        for j := 0; j < i; j++ {
            if s[i] < s[j] {
                s[j], s[i] = s[i], s[j]
            }
        }
    }
    fmt.Println(s)
}

// 动态规划（dp数组存放标记）
func maxStr(s []int) {
    l := len(s)
    var dp = make([]int, l)
    var index int
    dp[0] = s[0]
    max := dp[0]

    for i := 1; i < l; i++ {
        m := s[i] + dp[i-1]
        if m > s[i] {
            dp[i] = m
        } else { // 更新（dp和起始位置）
            dp[i] = s[i]
            index = i
        }
        if dp[i] > max {
            max = dp[i]
        }
    }
    fmt.Println(dp, max, index)
}