1 数组中等于指定数的数字组合
a = [1, 1, 3, 5]
l = len(a)
n = 4

if n<a[0]:
    print(0)
elif n<a[-1] and :

else:
    for i in ragne(l):
        if arr.index(n-a[l]):
    print

2 列出字符串中所有字符出现字数 不允许用字典 count 
时间换空间一次迭代(leetcode做过 用字典哭死) 不会 
arr = 'jsljfls'
arr1 = sorted(arr)
方法一：
x = arr1[0]
for i in range(1,len(arr)):
    if x==arr1[i]:
        n+=1
    else:
        print(x, n)
        x = arr1[i]
方法二：
for i in set(arr):
    print(i,arr1.rindex(i)-arr1.index(i)+1)
方法三：
from collection import Counter
for i in Counter(arr).items()

瀑布模型：
    自上而下，相互衔接的固定顺序；适用于需求明确且有经验或案例的项目
    优点：可以规范过程，利于评审
    缺点：过于理想，缺乏灵活性，容易产生需求偏差
旋转模型：
    增加了风险预测；适合大型复杂系统
v模型：
敏捷开发：
DevOps：CICD（持续交付，持续部署）

结构性模式
    # 构造模式

    # 适配器模式
    翻译官的样子；原本由于接口不兼容而不能一起
    工作的那些类使他们可以一起工作。

    # 装饰器模式
    钢铁战甲的样子；动态的给对象加额外的功能，
    相比生成子类更灵活。

    # 桥接模式
    刷脸支付的样子；抽象部分与实现部分分离，
    使他们可以独立变化。

    # 代理模式
    为其他对象提供一种代理以控制这个对象的访问。

行为模式
    责任链
    迭代器
    中介者

# 单例模型
#__new__()
class Single():
    def __new__(cls):
        if not hasattr(cls, "_instance"):
            cls._instance = super().__new__(cls)
        return cls._instance

用__new__()这种魔法函数实现单例，写伪代码？
class C():
    _isnew = None #实例对象
    _isinit = False #是否被初始化

    def __new__(cls, *args, **kw):
        if not _isinit: #是否被构造
            cls._isnew = super.__new__(cls)
        return cls._isnew #返回对象

3 装饰器解释  写一个运行时间装饰器 实现输出函数参数
import time

函数饰器
def decorator_args(d1=1): #接收装饰器参数
    def decorator(fn):
        def wrapper(*args, **kwargs):
            print(d1, d2) #打印装饰器参数
            print(args, kwargs) #打印方法参数
            start = time.time()
            fn(args, kwargs) #调用方法
            end = time.time()
            print(f"{fn.__name__} used: {end-start}")
        return wrapper
    return decorator

@decorator_args(2)
def fn1():.....
作用域：L(local：局部作用域)，E(nonlocal：嵌套作用域)，
       G(global：全局作用域)，B(build：内建)

类装饰器
class logger1():
    def __init__(self, fn): #接收方法
        self.fn = fn 
    def __call__(self, *args, **kwargs): #实现逻辑
        return self.fn(args, kwargs)

class logger2():
    def __init__(self, y=2): #接收装饰器参数
        self.y = y
    def __call__(self, func): #接收方法
        def wrapper(*args, **kwargs): #实现逻辑
            return self.fn(args, kwargs)
        return wrapper

#@logger1
@logger2(3)
def fn2():....

@staticmethod 静态方法
@classmethod 类方法
@property getter方法（只读）


单例模式
def dl(cls):
    def dl_wrapper(*args, **kwargs):
        # 如果没有实例
        if not dl_wrapper.instance():
            # 创建实例（类装饰器作用于__init__()）
            dl_wrapper.instance = cls(args, kwargs)
            return dl_wrapper.instance
        dl_wrapper.instance = None
    return dl_wrapper
@dl
class C1():
    .....

# 工厂模式
class Dog():
    def __init__(self, *args, **kwargs):
        pass
class Cat():
    def __init__(self, *args, **kwargs):
        pass

def fac(animal):
    if animal.lower()=='dog':
        return Dog()
    elif animal.lower()=='cat':
        return Cat()
    else:
        print("工厂没模具")

arr = [1,0,3,1,52,3,0]

#本位与后面位比较，确定本位
def select_sort(arr):
    for i in range(len(arr)-1,0,-1):
        for j in range(i):
            if arr[i]<arr[j]:
                arr[i],arr[j]=arr[j],arr[i]
    return arr

# 两两比较，确定末位
def bubble_sort(arr):
    for i in range(len(arr)-1, 1, -1):
        flag = True
        for j in range(i):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1]=arr[j+1], arr[j]
                flag = False
        if flag:
            break
    return arr

# 按基准值，左大右小摆放，分而治之
def quick_sort(arr):
    if len(arr)>1: #递归入口
        mid = arr[0] #基值
        l, r = [], []
        arr.remove(mid)
        for i in arr:
            if i>mid:
                r.append(i) #大于基准值放右边
            else:
                l.append(i) #小于基准值放左边
        return quick_sort(l) + [mid] + quick_sort(r)
    else:
        return arr

qsort=lambda l:l if len(l)<=1 else qsort([x for x in l[0] if x<=l[0]])+[l[0]]+qsort([y for y in l[1:] if y>l[0]])

#
def insertion_sort(arr):
    # 从数据第二个元素开始循环，直到最后一个元素
    for i in range(1, len(arr)):
        # 这个是我们想要放在正确位置的元素
        key_item = arr[i]
        # 初始化变量，用于寻找元素正确位置
        j = i - 1
        # 遍历元素左边的列表元素，一旦key_item比被比较元素小，那么找到正确位置插入。
        while j >= 0 and arr[j] > key_item:
            # 把被检测元素向左平移一个位置，并将j指向下一个元素（从右向左）
            arr[j + 1] = array[j]
            j -= 1
        # 当完成元素位置的变换，把key_item放在正确的位置上
        arr[j + 1] = key_item
    return arr

读取大文件
def read_big_file(f_name, size=1024):
    with open(f_name, 'r') as fp:
        while txt := fp.read(size): #3.8+
            yield txt

Python垃圾回收机制，内存机制？
引用计数（sys.getrefcount()-1）为主，
标记清除(解决交叉引用)和分代回收(解决前者效率问题，gc.collect()可触发)为辅
内存管理机制为Pymalloc（内存池（如小整数池））
import psutil

4、有了解Python虚拟机吗？（回答不了解，只知道Python解释器），那你说一下解释器吧 
运行字节码的环境

5、解释器主要的功能是什么？ 
接收源代码，编译成字节码

6、GIL锁有了解吗，解释一下 
python的全局解释器锁，无法实现多线程并行，cpu利用率最大100%

7、协程和线程之间的区别 
协程：微线程，用户态，异步调用，多协程可以并行
线程：进程的实例，内核态，操作系统调度，同步机制，锁机制

8、进程切换和线程切换的区别 
进程切换涉及到虚拟地址空间的切换而线程切换则不会。
因为每个进程都有自己的虚拟地址空间，而线程是共享
所在进程的虚拟地址空间的，因此同一个进程中的线程
进行线程切换时不涉及虚拟地址空间的转换。

9、Python函数声明中有三种类型的参数，说一下区别（听题没听清楚，以为
问的三种函数类型，面试官指正了问的是三种参数类型，反应过来后就重答了一下）
必选参数；默认参数；不定长参数，不定长关键字参数

7.python的数据结构有哪些
字典 数组（列表，元祖，字符串） 集合 自定义数据结构（类）
栈（append，pop） 队列（collections.deque）

8.python切片
[开始:结束:步长] 越界不报错

16、python用哪个模块实现多线程？
import threading

6、re用过？讲讲用过哪些正则？
re.search：扫描整个string找到第一个匹配然后返回
re.match：从头匹配一个符合规则的字符串
.group() 返回被 RE 匹配的字符串

.start() 返回匹配开始的位置
.end() 返回匹配结束的位置
.span()返回一个元组包含匹配 (开始,结束) 的位置

4、.*和.*?的区别
单字符匹配n次，贪婪匹配
满足条件的匹配一次，最小匹配

6、字典树
class Trie:
    # 初始化
    def __init__(self):
        self.root = {}
        self.end = "#"
 
    # 添加单词
    def add(self, word: str):
        node = self.root
        for char in word:
            node = node.setdefault(char, {})
        node[self.end] = None
 
    # 搜索单词是否存在
    def search(self, word):
        node = self.root
        for char in word:
            if char not in node:
                return False
            node = node[char]
        return self.end in node

11、什么是元类
metaclass(元类)创建或魔改类
方法1、从type派生出来；
方法2、metaclass=基类，用基类__new__()构造对象

4 导包（import）之类的知识点。 做错了 
import *
from _ import _ [as xxx]
import xx as x <==> x = __import__('xx')

11、Python中的迭代器是怎么用的 
next()方法遍历

12、你是怎么理解线程安全的 ？
因为多线程对共享的数据在时间片轮转存在非原子操作，需要线程同步机制，

13、有哪些进程间通信方式 ？
管道，信号，消息队列，共享内存，套接字

14、为了保证你刚才说的同步，有哪些方法呢（答了互斥锁和信号量，面试官
问还有别的吗，答可能还有信号）？
[互斥量（线程的）]，[管程，信号量，临界区，事件（进程的）]

9、set了解么？和list的区别？底层如何实现的？
哈希map 

10、哈希如何处理冲突？
开放寻址，拉链，再哈希

4、哈希表原理，哈希冲突怎么解决
使用哈希函数将关键码key转换为对应的数组下标；寻址容易，插入和删除困难；
解决：开放地址法；再哈希；链地址法；公共溢出区法
构造方法：除留余数法、平方取中法、随机数法、数字分析法、直接定址法、折叠法

5、二叉树的定义
树中节点的度不大于2的有序树

13、什么是最小堆
二叉堆中：根节点
最大的为大根堆（最大堆），
最小的为最小堆。

10、知道最小生成树吗
将图变成一颗最小权累加和的树

8、数据结构这一块你比较熟悉哪个，或者算法（回答都还可以），那么树的使用
场景有哪些（答了一些场景），比如红黑树一般会在哪里使用呢（不知道） ？
完全二叉树：先挂左边的二叉树
满二叉树：n == 2^h-1的完全二叉树
哈夫曼树：带权路径最小的二叉树；电讯通信中，数据文件压缩
平衡二叉树（AVL）：左右子树树高度差不超过1；查找方便，windows对
进程地址空间的管理用到了AVL树
红黑树：根节点（黑），红黑相隔；插入删除方便，map和set都是
用红黑树实现的，linux中进程的调度用的是红黑树
B树：N叉（N-ary）平衡树，Balance(平衡)，每个节点可以存储多
个数据，而且每个节点不止有两个子节点，最多可以有上千个子节点
B+树：叶子节点保存了完整的索引和数据，叶子节点类似于一个单链
表而非叶子节点只保存索引值；范围查询方便，适合做数据库索引，
这种需要持久化在磁盘
Trie树(字典树，前缀树): 根节点不保存数据，其余节点各保存一个数据；
用在统计和排序，保存大量字符串，如自动机
线段树：根节点数据分布在左右子节点上；解决区间问题（avl树）

说说有哪些常见的漏洞？
SQL注入、XSS、CSRF

14、场景题，双十一高并发，阿里架构师推出的产品是怎么做的，给你做能想到哪些技术难点
（答了两个点，面试官问还有别的点吗，提示了数据库支撑不了，补充了中间件）
数据库
    读写分离：一主（写）多从（写）
    水平切分：

23、容器的作用，解决了什么问题?
服务运行的地方，高资源利用率与隔离，环境标准化和版本控制，持续部署与测试，跨云平台支持

2、什么是 LVS？
Linux 虚拟服务器，是一个虚拟的服务器集群系统

3、为什么需要用nginx反向代理
服务器安全；为负载均衡和动静分离提供实现支持

4、nginx如何实现负载均衡
轮询；加权；ip_hash；fair；url_hash

LVS：纯 4 层负载均衡，运行在内核态，性能是软件负载均衡中最高的。
Nginx：支持 4 层/7 层负载均衡，支持 HTTP、E-mail 协议。
HAproxy：是 7 层负载均衡软件，支持 7 层规则的设置，性能也不错。

8、统计在文件夹/root 下，包含“word”的文件的个数
ll | grep ".word." | wc -l

5、TCP的重传机制、快速重传是怎样的 ?
重传机制：超时重传，选择重传，快速重传
快速重传：3次相同确认，立即重传

11、TCP如何保证数据完整
可靠传输：差错控制，流量控制，拥塞控制

12、如何杀死 test.py进程（我说先用ps查看进程号，
然后kill -9 kill掉，然后就问我如何用一行命令杀死）
pgrep test.py |xargs kill -s 9
pkill -u test.py

7、僵尸进程和孤儿进程的危害 ?
僵尸进程：父进程没给子进程收尸（没调用wait或者waitpid）
，子进程的进程描述符仍然保存在系统中；浪费有限的pid
孤儿进程：父进程结束了，子进程还在，将被init进程
(进程号为1)所收养；没什么大危害

24、TCP拥塞控制是怎么做的
慢开始：开始为1，指数增长
拥塞避免：达到慢启动阈值，加法增长；拥塞直接降为1，阈值减半
快重传：3次重复确认，立即重传
快恢复：3次重复确认，阈值减半，加法增长；降低拥塞发生


2、spark中的shuffle有哪些？ 
3、mysql、spark中的join原理。 
4、算法题：矩阵乘法。 
5、HBase的优势，为什么使用了HBase、设计rowkey？ 
6、spark中几种partitioner、水塘抽样？ 
7、算法题： 
有一个数组， 
（1）其中有一个数出现次数超过半数，找到这个数？ 
（2）其中有两个数出现次数都超过了30%，找到这两个数？ 
一个application提交运行的过程，画图。

1.对数仓的理解
2.维度建模的了解
3.雪花模型和星形模型的理解以及优劣对比
4.MR数据处理过程
5.MR的数据倾斜怎么产生以及解决方法
6.一道业务场景题：A与B关联，B中有city字段，但是city里北上广数据量特别大，怎么优化
7.常用的窗函数有哪些（因为我说了rank(),desen_rank(),row_number()，所以又问了我他们之间的区别，建议这种问题千万别给自己挖坑，一定要说特别熟的，最好能说一下平时在什么场景会用）
8.spark的作业提交流程（不是直接这么问的，具体怎么问的忘记了，问题没听懂可以让他们解释一下，我就是没听懂，然后具体问了一下）
9.spark context工作时都做了哪些事
10.宽窄依赖的理解，为什么要分宽窄依赖
11.哪些算子走宽依赖，哪些走窄依赖

1.怎么理解hadoop生态圈
2.MR数据倾斜怎么处理
3.SQL的优化
4.自己设计hashmap，怎么设计
5.MR数据处理流程
6.为什么学大数据
