1 数组中等于指定数的数字组合 不会
a = [1, 1, 3, 5]
l = len(a)
n = 4

if n<a[0]:
    print(0)
elif n<a[-1] and :

else:
    for i in ragne(l):
        if arr.index(n-a[l]):
    print

2 列出字符串中所有字符出现字数 不允许用字典 count 
时间换空间一次迭代(leetcode做过 用字典哭死) 不会 
arr = 'jsljfls'
arr1 = sorted(arr)
方法一：
x = arr1[0]
for i in range(1,len(arr)):
    if x==arr1[i]:
        n+=1
    else:
        print(x, n)
        x = arr1[i]
方法二：
for i in set(arr):
    print(i,arr1.rindex(i)-arr1.index(i))
方法三：
from collection import Counter
for i in Counter(arr).items()

3 装饰器解释  写一个运行时间装饰器 实现输出函数参数
import time

函数饰器
def decorator_args(d1=1): #接收装饰器参数
    def decorator(fn):
        def wrapper(*args, **kwargs):
            print(d1, d2) #打印装饰器参数
            print(args, kwargs) #打印方法参数
            start = time.time()
            fn(args, kwargs) #调用方法
            end = time.time()
            print(f"{fn.__name__} used: {end-start}")
        return wrapper
    return decorator

@decorator_args(2)
def fn1():.....
作用域：L(local：局部作用域)，E(nolocal：嵌套作用域)，
       G(global：全局作用域)，B(build：内建)

类装饰器
class logger1():
    def __init__(self, fn): #接收方法
        self.fn = fn 
    def __call__(self, *args, **kwargs): #实现逻辑
        return self.fn(args, kwargs)

class logger2():
    def __init__(self, y=2): #接收装饰器参数
        self.y = y
    def __call__(self, func): #接收方法
        def wrapper(*args, **kwargs): #实现逻辑
            return self.fn(args, kwargs)
        return wrapper

#@logger1
@logger2(3)
def fn2():....

@staticmethod 静态方法
@classmethod 类方法
@property getter方法（只读）


单例模式
def dl(cls):
    def dl_wrapper(*args, **kwargs):
        # 如果没有实例
        if not dl_wrapper.instance():
            # 创建实例（类装饰器作用于__init__()）
            dl_wrapper.instance = cls(args, kwargs)
            return dl_wrapper.instance
    dl_wrapper.instance = None
    return dl_wrapper
@dl
class C1():
    .....

class MyClass():
    _instance = None
    _isinit = False

    def __new__(cls, *args, **kwargs):
        if not _instance:
            cls._instance = super().__new__(cls)
        return cls._instance

    def __init__(self, x, y):
        cls = type(self)
        if not _isinit:
            self.x = x 
            self.y = y
            cls.flag = True


4 import之类的知识点。 做错了 
import *
from _ import _

5手撕快排 直接秒杀 


1、一上来就做题，跳台阶，牛客原题
2、字典、元组、列表的in方法哪个更快
3、open和with open的区别，平常用哪个比较多
4、.*和.*?的区别
5、Django中客户端发送过来的请求如何处理，返回一个什么对象
6、字典树
9、迭代器
10、TCP三次握手的流程
11、TCP如何保证数据完整
12、如何杀死 test.py进程（我说先用ps查看进程号，
然后kill -9 kill掉，然后就问我如何用一行命令杀死）
13、快排的思路
14、反问


1、自我介绍
2、给定一个a.txt，b.txt文件，里面存有许多ip地址，
现在判断有多少个相同的IP
3、介绍一下你觉得最好的一个项目
4、在浏览器中输入一个url会发生一些什么
5、TCP的重传机制、快速重传是怎样的
6、常用的Linux的命令
7、僵尸进程和孤儿进程的危害
8、统计在文件夹/root 下，包含“word”的文件的个数
9、MySQL的调优
10、现有100亿个QQ号，如何快速判断某个QQ号是否在其中，
存储方式自己考虑，越快越好（运行时间），空间越小越好。


1. 自我介绍
2. 项目介绍
3. 算法题 用回溯解了
4. 反问
5. 最后面试官问能不能接受做和研究生学习方向无关的工作


2、项目用到哪些数据结构
3、python数据结构有哪些，各有啥特点
4、哈希表原理，哈希冲突怎么解决
5、二叉树的定义
6、二叉树查找方式有哪些
7、二叉树和其他数据结构相比有什么特点
8、B+树有什么应用场景
9、二叉树和图有什么区别
10、知道最小生成树吗
11、什么是元类
12、堆和栈的区别
13、什么是最小堆
14、动态规划是怎么解决问题的
15、会哪些排序算法，冒泡排序复杂度，稳不稳定
16、python内置的算法有哪些


最大回文字符串
项目中的难点
http和https区别
ssl加密方法
字符串拼接方法哪个更快
指针和引用区别
红黑树及应用


你觉得Python语言有什么特性呢？ 
3、解释性语言和编译性语言的区别 
4、有了解Python虚拟机吗？（回答不了解，只知道Python解释器），那你说一下解释器吧 
5、解释器主要的功能是什么？ 
6、GIL锁有了解吗，解释一下 
7、协程和线程之间的区别 
8、进程切换和线程切换的区别 
9、Python函数声明中有三种类型的参数，说一下区别（听题没听清楚，以为
问的三种函数类型，面试官指正了问的是三种参数类型，反应过来后就重答了一下） 
10、说一下你知道的Django组件 
11、Python中的迭代器是怎么用的 
12、你是怎么理解线程安全的 
13、有哪些进程间通信方式 
14、为了保证你刚才说的同步，有哪些方法呢（答了互斥锁和信号量，面试官
问还有别的吗，答可能还有信号） 
15、列表去重 
16、自己实现set类，应该如何去实现 
17、有写过单元测试吗（回答没写过），那你平时是怎么调试的（回答的打断点debug），
有在Linux上调试过吗（无） 
18、数据结构这一块你比较熟悉哪个，或者算法（回答都还可以），那么树的使用
场景有哪些（答了一些场景），比如红黑树一般会在哪里使用呢（不知道） 
19、在100个数中找第K大的数，如何实现（答的快排分治，用K和基准值比较决定往左
分支或右分支进行单支递归），还有其他的思路吗（思考后说了大根堆），讲一下大根
堆是什么（讲了大根堆的实现原理） 
20、Python还有哪些是你比较熟悉的，是我刚才没有问到的？（答了列表元组和字典
的底层实现原理），那你说一下字典的底层原理吧（讲了3.6前后的字典原理区别） 
21、Linux内核熟悉吗（不熟悉），Linux常规使用（不太用） 
22、网络这一块熟悉吗，我在浏览器上输入URL，它的请求过程是怎样的 
23、IP层分片重组是用来做什么的 
24、TCP拥塞控制是怎么做的 
25、文件系统中的软链接知道是什么吗（不知道） 
26、现在有一个任务，最多只有10个线程在执行，如何实现？（答了线程池）
线程池具体怎么实现？那如果池子满了，其他任务该如何处理？还有别的思路吗？
（要求提示一下，面试官提示了用队列去实现，答了双端队列） 
27、Python中使用锁是不是比较少？（是的） 
28、如果我两个主机网络不通了，该如何排查？ 
29、算法题：力扣21 - 合并两个有序链表，手撕 


3、为什么需要用nginx反向代理
4、nginx如何实现负载均衡
12、还读过什么源码
13、为什么想到去读CPython解释器的源码
14、场景题，双十一高并发，阿里架构师推出的产品是怎么做的，给你做能想到哪些技术难点
（答了两个点，面试官问还有别的点吗，提示了数据库支撑不了，补充了中间件）
15、介绍自己的技术优势
16、什么时候接触Django
17、本科阶段的项目经验
18、介绍学习成绩
19、自己想要达到的程度
20、如果涉及其他语言的项目，学习能力如何
21、职业规划
22、除了Python外还需要什么技能
23、容器的作用，解决了什么问题
24、除了容器呢，还需要什么


2、python内存管理（详细介绍了GC三种方式以及底层实现，和内存池相关）
3、装饰器有用过么？（staticmethod和自己写的时间戳装饰器） 
4、进一步： staticmethod讲一下？和其他类成员函数的区别？
5、用过什么库？各自用来干什么？（答：numpy，os，sys，re，collections） 
6、re用过？讲讲用过哪些正则？（re.search & re.match） 
7、上面两者的区别？
8、深浅拷贝？详细说一下？
9、set了解么？和list的区别？底层如何实现的？（哈希map） 
10、哈希如何处理冲突？（开放寻址，拉链，再哈希） 
11、类的继承了解么？项目里面有没有涉及到？ 
12、本科有学过网络和OS对吧？（嗯嗯嗯···） 
13、TCP和UDP这个知道的吧？（答：老熟人了）那好我问你个不常见的吧（我：危）， 
ARP协议了解嘛，具体的运作方式？（刚好面华为的时候看过，甚至答了RARP） 
14、第二次向同一个主机发送数据的时候还需要用ARP吗？（不用，有缓存） 
15、线程进程了解嘛？进程的调度？通讯方式？（经典八股文）项目里面有实现这些通讯方式嘛？（？？？） 
16、python用哪个模块实现多线程？（import thread）项目中有涉及多线程嘛？（无···） 
17、数据结构了解嘛？（本科软工）讲一下数组和链表的区别？（送分题）插入数据的话二者的复杂度？ 
18、排序和查找算法了解嘛？那些排序算法复杂度是nlogn？ 
19、嗯，基础非常好，那么我们来做个算法题吧（危）
手撕代码：单链表逆转下标由m到n之间的节点 


1、嗯...XXX是吧？咱们先来一道算法题吧（危），你在上面写个快排吧（瞬间秒杀） 
2、好你来个自我介绍吧（自我介绍+项目） 
3、然后深挖了20分钟的项目，主要涉及到有多少行代码，那些部分是自己做的，难点在哪里，
某几部分的算法是如何实现的，然后面试官会选一些他认为是难点的地方进行提问 
4、你怎么简历还写了测开啊？（赶紧表示自己本意是想做开发的） 
5、“你做了测试就转不了开发了呦” （危） 


说说有哪些常见的漏洞（SQL注入、XSS、CSRF）
做过渗透测试相关工作吗？
说说SMB协议（不是很了解）
详细介绍了自己的一个项目（协议相关）
协议常见的攻击（中间人、重放 的原理、防御）
py2 和 py3 的区别 （py2 中的 range 和 xrange 当时没说对。。。）
b树、b+树、红黑树
快排和冒泡的比较（口述分别怎么实现的）


2.装饰器，生成器，多线程 
3.列表和元组，字典的底层实现 
4.最长公共前缀问题

5.对java和python多线程有什么理解？


2、排序（将列表排序）
3、链表相关（合并，排序，反转）
4、装饰器
5、Mysql

3、两道算法题（递归和动态规划）
（2）LC232.用栈实现队列
（3）LC40.组合总和2


5、Python了解哪些底层原理
6、如果进程内存使用过高，可能有几个G，在Python该如何
查找具体是哪一个对象占用比较高（不会，就硬瞎说），通过
哪个模块可以找到这些信息

7、用__new__()这种魔法函数实现单例，写伪代码

8、场景题：设计服务器，服务器只开了一个端口，但要在一分钟
内处理上万的请求，用Python该处理这种上万级的请求
流水线技能，客户端不必比及服务器端回来

9、浏览器输入URL全过程
浏览器缓存
域名解析(hosts-DNS)
向服务器发起tcp链接，与浏览器建立tcp三次握手；
握手成功后，浏览器想服务器发起http请求，拉取数据包；
服务器处理收到的请求，将处理的数据包返回到浏览器；
读取页面内容，浏览器渲染，解析html源码；
生成DOM树，解析css样式，js交互；

11、CLOSE-WAIT状态的含义，如果服务端出现过多C-W状态，该如何处理

12、请求的响应速度过慢，如何分析排除出具体原因（面试官提示说
服务端的问题）

13、如何分析数据库慢查询，explan提示的字段有哪些，全表扫描
的话会type字段会显示什么

14、如何监控Django层面操作的耗时，如何定位服务器问题


3.django，Flask，FastAPI的优缺点（项目相关）
优：是一个完整的Web开发框架；广泛应用，是最活跃
的生态系统非常丰富，有大量的第三方类匹配类库。
能够轻松地构建REST风格的API，而且因为它有模块化和可自定义的架构，
在前后端分离的趋势下，用Django构建Web API也很容易。
缺：Django Models没有mixins，只有简单的继承。

优：支持单元测试，而且由于它的内置开发服务器、集成支持等等，
所以可以通过调整扩展来过渡到Web框架。比Django更加灵活
缺：有一个单独的来源源，表明它将依次处理每个请求，所以不管有多少个请求，
flask仍然轮流处理，这样花费的时间更多

优：基于Python3.6+标准类型提示，支持异步，就像它的名字一样，
FastAPI是为了快速API而生的，快速，高效。与NodeJS和Go可以相提并论。
基于JSON Schema的Fast API(用来验证JSON数据结构的工具)、OAuth2.0
(用来授权的行业标准协议)和OpenAPI(可公开获得的应用程序编程接口)等
标准之上的；自动类型检查意味着减少了bug，而且Fast API可以验证开发
人员的数据类型，即使是在深层嵌套JSON请求中也是如此。
缺：因为FastAPI比较新，所以相对于其他框架，社区比较小，第三方教程也比较少。

7.python的数据结构有哪些
字典 数组（列表，元祖，字符串） 集合 自定义数据结构（类）
栈（append，pop） 队列（collections.deque）

8.python切片
[开始:结束:步长] 越界不报错

9.元组和列表的异同
元祖：()，不可变
列表：[]，可变

10.手撕快排，并解释